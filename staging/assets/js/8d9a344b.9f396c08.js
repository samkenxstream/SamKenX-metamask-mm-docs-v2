"use strict";(self.webpackChunkmm_docs_v_2=self.webpackChunkmm_docs_v_2||[]).push([[8114],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>h});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var p=a.createContext({}),l=function(e){var n=a.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},c=function(e){var n=l(e.components);return a.createElement(p.Provider,{value:n},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,p=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),u=l(t),m=r,h=u["".concat(p,".").concat(m)]||u[m]||d[m]||o;return t?a.createElement(h,s(s({ref:n},c),{},{components:t})):a.createElement(h,s({ref:n},c))}));function h(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,s=new Array(o);s[0]=m;var i={};for(var p in n)hasOwnProperty.call(n,p)&&(i[p]=n[p]);i.originalType=e,i[u]="string"==typeof e?e:r,s[1]=i;for(var l=2;l<o;l++)s[l]=t[l];return a.createElement.apply(null,s)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},4702:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>s,default:()=>u,frontMatter:()=>o,metadata:()=>i,toc:()=>l});var a=t(7462),r=(t(7294),t(3905));const o={},s="Snaps exports",i={unversionedId:"reference/exports",id:"reference/exports",title:"Snaps exports",description:"A snap can export the following functions.",source:"@site/snaps/reference/exports.md",sourceDirName:"reference",slug:"/reference/exports",permalink:"/mm-docs-v2/staging/snaps/reference/exports",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"snapsSidebar",previous:{title:"Snaps JSON-RPC API",permalink:"/mm-docs-v2/staging/snaps/reference/rpc-api"},next:{title:"Snaps command line interface",permalink:"/mm-docs-v2/staging/snaps/reference/cli/"}},p={},l=[{value:"<code>onRpcRequest</code>",id:"onrpcrequest",level:2},{value:"Parameters",id:"parameters",level:3},{value:"Returns",id:"returns",level:3},{value:"Examples",id:"examples",level:3},{value:"TypeScript",id:"typescript",level:4},{value:"JavaScript",id:"javascript",level:4},{value:"<code>onTransaction</code>",id:"ontransaction",level:2},{value:"Parameters",id:"parameters-1",level:3},{value:"Returns",id:"returns-1",level:3},{value:"Examples",id:"examples-1",level:3},{value:"TypeScript",id:"typescript-1",level:4},{value:"JavaScript",id:"javascript-1",level:4},{value:"<code>onCronjob</code>",id:"oncronjob",level:2},{value:"Parameters",id:"parameters-2",level:3},{value:"Examples",id:"examples-2",level:3},{value:"TypeScript",id:"typescript-2",level:4},{value:"JavaScript",id:"javascript-2",level:4}],c={toc:l};function u(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,a.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"snaps-exports"},"Snaps exports"),(0,r.kt)("p",null,"A snap can export the following functions."),(0,r.kt)("h2",{id:"onrpcrequest"},(0,r.kt)("inlineCode",{parentName:"h2"},"onRpcRequest")),(0,r.kt)("p",null,"To communicate with dapps and other snaps, the snap must implement its own JSON-RPC API by exposing\nan exported function called ",(0,r.kt)("inlineCode",{parentName:"p"},"onRpcRequest"),".\nWhenever the snap receives a JSON-RPC request, the ",(0,r.kt)("inlineCode",{parentName:"p"},"onRpcRequest")," handler function is called with\nthe following parameters."),(0,r.kt)("admonition",{title:"Does my snap need to have an RPC API?",type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"No, that's up to you!\nIf your snap can do something useful without receiving and responding to JSON-RPC requests, then you\ncan skip exporting ",(0,r.kt)("inlineCode",{parentName:"p"},"onRpcRequest"),".\nHowever, if you want to do something such as manage the user's keys for a particular protocol and\ncreate a dapp that sends transactions for that protocol via your snap, for example, you must\nspecify an RPC API.")),(0,r.kt)("h3",{id:"parameters"},"Parameters"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"RpcHandlerArgs")," - The origin and the JSON-RPC request.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"import { JsonRpcRequest } from '@metamask/types';\n\ninterface RpcHandlerArgs = {\n  origin: string;\n  request: JsonRpcRequest<unknown[] | { [key: string]: unknown }>;\n};\n")),(0,r.kt)("h3",{id:"returns"},"Returns"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"type RpcHandlerReturn = Promise<unknown> | unknown;\n")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"RpcHandlerReturn")," - A promise containing the return of the implemented method."),(0,r.kt)("h3",{id:"examples"},"Examples"),(0,r.kt)("h4",{id:"typescript"},"TypeScript"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"import { OnRpcRequestHandler } from '@metamask/snap-types';\n\nexport const onRpcRequest: OnRpcRequestHandler = async ({\n  origin,\n  request,\n}) => {\n  switch (request.method) {\n    case 'hello':\n      return 'world!';\n\n    default:\n      throw new Error('Method not found.');\n  }\n};\n")),(0,r.kt)("h4",{id:"javascript"},"JavaScript"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"module.exports.onRpcRequest = async ({ origin, request }) => {\n  switch (request.method) {\n    case 'hello':\n      return 'world!';\n\n    default:\n      throw new Error('Method not found.');\n  }\n};\n")),(0,r.kt)("h2",{id:"ontransaction"},(0,r.kt)("inlineCode",{parentName:"h2"},"onTransaction")),(0,r.kt)("p",null,"If the snap wants to provide transaction insights before a user signs a transaction, the snap must\nexport a function called ",(0,r.kt)("inlineCode",{parentName:"p"},"onTransaction"),".\nWhenever there's a contract interaction, and a transaction is submitted via the extension, this\nfunction is called.\nThe raw unsigned transaction payload is passed to the ",(0,r.kt)("inlineCode",{parentName:"p"},"onTransaction")," handler function."),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"For the extension to call the ",(0,r.kt)("inlineCode",{parentName:"p"},"onTransaction")," method of the snap, you must request the\n",(0,r.kt)("a",{parentName:"p",href:"/mm-docs-v2/staging/snaps/how-to/request-permissions#endowmenttransaction-insight"},(0,r.kt)("inlineCode",{parentName:"a"},"endowment:transaction-insight")),"\npermission.")),(0,r.kt)("h3",{id:"parameters-1"},"Parameters"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"onTransactionArgs")," - The raw transaction payload and the\n",(0,r.kt)("a",{parentName:"li",href:"https://github.com/ChainAgnostic/CAIPs/blob/master/CAIPs/caip-2.md"},"CAIP-2 chain ID"),".\nFor more details on the transaction object see\n",(0,r.kt)("a",{parentName:"li",href:"https://metamask.github.io/SIPs/SIPS/sip-3#appendix-i-ethereum-transaction-objects"},"SIP-3"),".")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"interface OnTransactionArgs {\n  transaction: Record<string, unknown>;\n  chainId: string;\n}\n")),(0,r.kt)("h3",{id:"returns-1"},"Returns"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"type OnTransactionHandlerReturn = Promise<OnTransactionResponse>;\n\ninterface OnTransactionResponse {\n  insights: { [key: string]: unknown };\n}\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"onTransactionResponse")," - The ",(0,r.kt)("inlineCode",{parentName:"li"},"insights")," object returned by the snap is displayed alongside the\nconfirmation for the transaction that ",(0,r.kt)("inlineCode",{parentName:"li"},"onTransaction")," was called with.\nKeys and values are displayed in the order received, with each key rendered as a title and each\nvalue rendered as a string.")),(0,r.kt)("h3",{id:"examples-1"},"Examples"),(0,r.kt)("h4",{id:"typescript-1"},"TypeScript"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'import { OnTransactionHandler } from "@metamask/snap-types";\n\nexport const onTransaction: OnTransactionHandler = async ({\n  transaction,\n  chainId,\n}) => {\n  const insights = /* Get insights */;\n  return { insights };\n};\n')),(0,r.kt)("h4",{id:"javascript-1"},"JavaScript"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"module.exports.onTransaction = async ({\n  transaction,\n  chainId,\n}) => {\n  const insights = /* Get insights */;\n  return { insights };\n};\n")),(0,r.kt)("h2",{id:"oncronjob"},(0,r.kt)("inlineCode",{parentName:"h2"},"onCronjob")),(0,r.kt)("p",null,"If a snap wants to run periodic actions for the user, the snap must export a function called ",(0,r.kt)("inlineCode",{parentName:"p"},"onCronjob"),".\nThis function is called at the specified times with the specified payloads defined in the\n",(0,r.kt)("a",{parentName:"p",href:"/mm-docs-v2/staging/snaps/how-to/request-permissions#endowmentcronjob"},(0,r.kt)("inlineCode",{parentName:"a"},"endowment:cronjob"))," permission."),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"For the extension to call the ",(0,r.kt)("inlineCode",{parentName:"p"},"onCronjob")," method of the snap, you must request the\n",(0,r.kt)("a",{parentName:"p",href:"/mm-docs-v2/staging/snaps/how-to/request-permissions#endowmentcronjob"},(0,r.kt)("inlineCode",{parentName:"a"},"endowment:cronjob"))," permission.")),(0,r.kt)("h3",{id:"parameters-2"},"Parameters"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"onCronjobArgs")," - Exclusively containing an RPC request specified in the ",(0,r.kt)("inlineCode",{parentName:"li"},"endowment:cronjob")," permission.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"interface onCronjobArgs {\n  request: JsonRpcRequest<unknown[] | { [key: string]: unknown }>;\n}\n")),(0,r.kt)("h3",{id:"examples-2"},"Examples"),(0,r.kt)("h4",{id:"typescript-2"},"TypeScript"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"import { OnCronjobHandler } from '@metamask/snap-types';\n\nexport const onCronjob: OnCronjobHandler = async ({ request }) => {\n  switch (request.method) {\n    case 'exampleMethodOne':\n      return wallet.request({\n        method: 'snap_notify',\n        params: [\n          {\n            type: 'inApp',\n            message: `Hello, world!`,\n          },\n        ],\n      });\n\n    default:\n      throw new Error('Method not found.');\n  }\n};\n")),(0,r.kt)("h4",{id:"javascript-2"},"JavaScript"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"module.exports.onCronjob = async ({ request }) => {\n  switch (request.method) {\n    case 'exampleMethodOne':\n      return wallet.request({\n        method: 'snap_notify',\n        params: [\n          {\n            type: 'inApp',\n            message: `Hello, world!`,\n          },\n        ],\n      });\n\n    default:\n      throw new Error('Method not found.');\n  }\n};\n")))}u.isMDXComponent=!0}}]);