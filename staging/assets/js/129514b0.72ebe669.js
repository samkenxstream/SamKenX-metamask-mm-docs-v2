"use strict";(self.webpackChunkmm_docs_v_2=self.webpackChunkmm_docs_v_2||[]).push([[4507],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>u});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var o=a.createContext({}),p=function(e){var t=a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},m=function(e){var t=p(e.components);return a.createElement(o.Provider,{value:t},e.children)},d="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,o=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),d=p(n),h=i,u=d["".concat(o,".").concat(h)]||d[h]||c[h]||r;return n?a.createElement(u,s(s({ref:t},m),{},{components:n})):a.createElement(u,s({ref:t},m))}));function u(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,s=new Array(r);s[0]=h;var l={};for(var o in t)hasOwnProperty.call(t,o)&&(l[o]=t[o]);l.originalType=e,l[d]="string"==typeof e?e:i,s[1]=l;for(var p=2;p<r;p++)s[p]=n[p];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},7617:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>m,contentTitle:()=>o,default:()=>h,frontMatter:()=>l,metadata:()=>p,toc:()=>d});var a=n(7462),i=(n(7294),n(3905)),r=n(5488),s=n(5162);const l={},o="Snaps JSON-RPC API",p={unversionedId:"reference/rpc-api",id:"reference/rpc-api",title:"Snaps JSON-RPC API",description:"Snaps communicate with MetaMask using the Snaps JSON-RPC API.",source:"@site/snaps/reference/rpc-api.md",sourceDirName:"reference",slug:"/reference/rpc-api",permalink:"/mm-docs-v2/staging/snaps/reference/rpc-api",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"snapsSidebar",previous:{title:"Reference",permalink:"/mm-docs-v2/staging/snaps/category/reference"},next:{title:"Snaps exports",permalink:"/mm-docs-v2/staging/snaps/reference/exports"}},m={},d=[{value:"Unrestricted methods",id:"unrestricted-methods",level:2},{value:"<code>wallet_enable</code>",id:"wallet_enable",level:3},{value:"Parameters",id:"parameters",level:4},{value:"Returns",id:"returns",level:4},{value:"Description",id:"description",level:4},{value:"Example",id:"example",level:4},{value:"<code>wallet_getSnaps</code>",id:"wallet_getsnaps",level:3},{value:"Returns",id:"returns-1",level:4},{value:"Description",id:"description-1",level:4},{value:"Example",id:"example-1",level:4},{value:"<code>wallet_installSnaps</code>",id:"wallet_installsnaps",level:3},{value:"Parameters",id:"parameters-1",level:4},{value:"Returns",id:"returns-2",level:4},{value:"Description",id:"description-2",level:4},{value:"Example",id:"example-2",level:4},{value:"<code>wallet_invokeSnap</code>",id:"wallet_invokesnap",level:3},{value:"Parameters",id:"parameters-2",level:4},{value:"Returns",id:"returns-3",level:4},{value:"Description",id:"description-3",level:4},{value:"Example",id:"example-3",level:4},{value:"Restricted methods",id:"restricted-methods",level:2},{value:"<code>wallet_snap_*</code>",id:"wallet_snap_",level:3},{value:"Parameters",id:"parameters-3",level:4},{value:"Returns",id:"returns-4",level:4},{value:"Description",id:"description-4",level:4},{value:"Example",id:"example-4",level:4},{value:"<code>snap_confirm</code>",id:"snap_confirm",level:3},{value:"Parameters",id:"parameters-4",level:4},{value:"Returns",id:"returns-5",level:4},{value:"Description",id:"description-5",level:4},{value:"Example",id:"example-5",level:4},{value:"<code>snap_dialog</code>",id:"snap_dialog",level:3},{value:"Description",id:"description-6",level:4},{value:"Alert dialog",id:"alert-dialog",level:5},{value:"Parameters",id:"parameters-5",level:6},{value:"Returns",id:"returns-6",level:6},{value:"Example",id:"example-6",level:6},{value:"Confirmation dialog",id:"confirmation-dialog",level:5},{value:"Parameters",id:"parameters-6",level:6},{value:"Returns",id:"returns-7",level:6},{value:"Example",id:"example-7",level:6},{value:"Prompt Dialog",id:"prompt-dialog",level:5},{value:"Parameters",id:"parameters-7",level:6},{value:"Returns",id:"returns-8",level:6},{value:"Example",id:"example-8",level:6},{value:"<code>snap_getBip32Entropy</code>",id:"snap_getbip32entropy",level:3},{value:"Parameters",id:"parameters-8",level:4},{value:"Returns",id:"returns-9",level:4},{value:"Description",id:"description-7",level:4},{value:"Example",id:"example-9",level:4},{value:"<code>snap_getBip44Entropy</code>",id:"snap_getbip44entropy",level:3},{value:"Parameters",id:"parameters-9",level:4},{value:"Returns",id:"returns-10",level:4},{value:"Description",id:"description-8",level:4},{value:"Example",id:"example-10",level:4},{value:"<code>snap_getBip32PublicKey</code>",id:"snap_getbip32publickey",level:3},{value:"Parameters",id:"parameters-10",level:4},{value:"Returns",id:"returns-11",level:4},{value:"Description",id:"description-9",level:4},{value:"Example",id:"example-11",level:4},{value:"<code>snap_manageState</code>",id:"snap_managestate",level:3},{value:"Parameters",id:"parameters-11",level:4},{value:"Returns",id:"returns-12",level:4},{value:"Description",id:"description-10",level:4},{value:"Example",id:"example-12",level:4},{value:"<code>snap_notify</code>",id:"snap_notify",level:3},{value:"Parameters",id:"parameters-12",level:4},{value:"Notification type",id:"notification-type",level:4},{value:"Returns",id:"returns-13",level:4},{value:"Description",id:"description-11",level:4},{value:"Example",id:"example-13",level:4}],c={toc:d};function h(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"snaps-json-rpc-api"},"Snaps JSON-RPC API"),(0,i.kt)("p",null,"Snaps communicate with MetaMask using the Snaps JSON-RPC API.\nThese API methods allow snaps to modify the functionality of MetaMask, and websites to install and\ncommunicate with individual snaps."),(0,i.kt)("h2",{id:"unrestricted-methods"},"Unrestricted methods"),(0,i.kt)("h3",{id:"wallet_enable"},(0,i.kt)("inlineCode",{parentName:"h3"},"wallet_enable")),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"This method is only callable by websites.")),(0,i.kt)("h4",{id:"parameters"},"Parameters"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"Array")),(0,i.kt)("ol",{parentName:"li",start:0},(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"RequestedPermissions")," - The requested permissions.")))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"interface WalletEnableParam {\n  wallet_snap: {\n    [snapId: string]: {\n      version?: string;\n    };\n  };\n  [permissionName: string]: {};\n}\n")),(0,i.kt)("h4",{id:"returns"},"Returns"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"interface WalletEnableResult {\n  // The user's Ethereum accounts, if the eth_accounts permission has been\n  // granted.\n  accounts: string[];\n  // The permissions granted to the requester.\n  permissions: Web3WalletPermission[];\n  // The user's installed snaps that the requester is permitted to access.\n  snaps: WalletInstallSnapsResult;\n  errors?: Error[]; // Any errors encountered during processing.\n}\n")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"WalletEnableResult")," - An object containing the requester's permitted Ethereum accounts, snaps, and\ngranted permissions."),(0,i.kt)("h4",{id:"description"},"Description"),(0,i.kt)("p",null,"This is a convenience method for requesting the user's accounts and connecting to and installing snaps.\nYou can think of it as a combination of\n",(0,i.kt)("a",{parentName:"p",href:"../../wallet/reference/rpc-api#eth_requestaccounts"},(0,i.kt)("inlineCode",{parentName:"a"},"eth_requestAccounts")),",\n",(0,i.kt)("a",{parentName:"p",href:"#wallet_installsnaps"},(0,i.kt)("inlineCode",{parentName:"a"},"wallet_installSnaps")),", and\n",(0,i.kt)("a",{parentName:"p",href:"../../wallet/reference/rpc-api#wallet_requestpermissions"},(0,i.kt)("inlineCode",{parentName:"a"},"wallet_requestPermissions")),"."),(0,i.kt)("h4",{id:"example"},"Example"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"let result;\ntry {\n  result = await ethereum.request({\n    method: 'wallet_enable',\n    // This entire object is ultimately just a list of requested permissions.\n    // Every snap has an associated permission or permissions, given the prefix `wallet_snap_`\n    // and its ID. Here, the `wallet_snap` property exists so that callers don't\n    // have to specify the full permission permission name for each snap.\n    params: [\n      {\n        wallet_snap: {\n          'npm:@metamask/example-snap': {},\n          'npm:fooSnap': {\n            // The optional version argument allows requesting\n            // SemVer version range, with semantics same as in\n            // package.json ranges.\n            version: '^1.0.2',\n          },\n        },\n        eth_accounts: {},\n      },\n    ],\n  });\n} catch (error) {\n  // The `wallet_enable` call will throw if the requested permissions are\n  // rejected.\n  if (error.code === 4001) {\n    console.log('The user rejected the request.');\n  } else {\n    console.log('Unexpected error:', error);\n  }\n}\n\n// If the installation of all snaps fails, the associated error(s) will be\n// returned in the `result.errors` array.\nif (result.errors) {\n  console.log('Snap installation failure :(', result.errors);\n} else {\n  console.log('Success!', result);\n  // Could print something of the form:\n  // {\n  //   accounts: ['0xa...', '0xb...'],\n  //   permissions: {\n  //     eth_accounts: {},\n  //     'wallet_snap_npm:@metamask/example-snap': {},\n  //   },\n  //   snaps: {\n  //     'npm:@metamask/example-snap': {\n  //       version: '1.0.0',\n  //       permissionName: 'wallet_snap_npm:@metamask/example-snap',\n  //       ...\n  //     },\n  //     'npm:fooSnap': {\n  //       error: { message: 'The snap does not exist.' },\n  //     },\n  //   }\n  // }\n}\n")),(0,i.kt)("h3",{id:"wallet_getsnaps"},(0,i.kt)("inlineCode",{parentName:"h3"},"wallet_getSnaps")),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"This method is only callable by websites.")),(0,i.kt)("h4",{id:"returns-1"},"Returns"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"interface WalletGetSnapsResult {\n  [snapId: string]: {\n    /**\n     * The ID of the Snap.\n     */\n    id: SnapId;\n\n    /**\n     * The initial permissions of the Snap, which will be requested when it is\n     * installed.\n     */\n    initialPermissions: RequestedSnapPermissions;\n\n    /**\n     * The name of the permission used to invoke the Snap.\n     */\n    permissionName: string;\n\n    /**\n     * The version of the Snap.\n     */\n    version: string;\n  };\n}\n")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"WalletGetSnapsResult")," - An object containing the requester's permitted snaps."),(0,i.kt)("h4",{id:"description-1"},"Description"),(0,i.kt)("p",null,"This method returns the IDs of the caller's permitted snaps and some relevant metadata."),(0,i.kt)("h4",{id:"example-1"},"Example"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"const result = await ethereum.request({ method: 'wallet_getSnaps' });\n\nconsole.log(result);\n// If any snaps are permitted, will print e.g.:\n// {\n//   accountRPC methods?s: ['0xa...', '0xb...'],\n//   permissions: {\n//     eth_accounts: {},\n//     'wallet_snap_npm:@metamask/example-snap': {},\n//   },\n//   snaps: {\n//     'npm:@metamask/example-snap': {\n//       version: '1.0.0',\n//       permissionName: 'wallet_snap_npm:@metamask/example-snap',\n//       ...\n//     }\n//   }\n// }\n")),(0,i.kt)("h3",{id:"wallet_installsnaps"},(0,i.kt)("inlineCode",{parentName:"h3"},"wallet_installSnaps")),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"This method is only callable by websites.")),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"This method only installs the requested snaps if the caller is permitted to do so.\nYou might want to use ",(0,i.kt)("a",{parentName:"p",href:"#wallet_enable"},(0,i.kt)("inlineCode",{parentName:"a"},"wallet_enable"))," instead, which both requests the\npermissions for the snaps ",(0,i.kt)("em",{parentName:"p"},"and")," installs them.")),(0,i.kt)("h4",{id:"parameters-1"},"Parameters"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"interface InstallSnapsParam {\n  [snapId: string]: {\n    version?: string;\n  };\n}\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"Array")),(0,i.kt)("ol",{parentName:"li",start:0},(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"InstallSnapsParam")," - The snaps to install.")))),(0,i.kt)("h4",{id:"returns-2"},"Returns"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"interface WalletInstallSnapsResult {\n  [snapId: string]:\n    | WalletGetSnapsResult[string]\n    | {\n        error: Error;\n      };\n}\n")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"WalletInstallSnapsResult")," - An object mapping the IDs of installed snaps to their metadata, or an\nerror if installation fails."),(0,i.kt)("h4",{id:"description-2"},"Description"),(0,i.kt)("p",null,"This method attempts to install the requested snaps, if they're permitted.\nIf the installation of any snap fails, its object value on the result contains an ",(0,i.kt)("inlineCode",{parentName:"p"},"error"),"\nproperty with the error that caused the installation to fail."),(0,i.kt)("p",null,"Optionally, you can specify a ",(0,i.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/semver"},"SemVer range")," for any snap to\nbe installed.\nIf you do so, MetaMask attempts to install a version of the snap that satisfies the requested range.\nIf a compatible version of a snap is already installed, the request to install that snap\nautomatically succeeds.\nIf an incompatible version is installed, MetaMask attempts to update the snap to the latest\nversion that satisfies the requested range.\nThe request succeeds if the snap is successfully updated, and fails if the update can't be completed."),(0,i.kt)("h4",{id:"example-2"},"Example"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"const result = await ethereum.request({\n  method: 'wallet_installSnaps',\n  params: [\n    {\n      'npm:@metamask/example-snap': {},\n      'npm:fooSnap': {\n        // The optional version argument allows requesting a SemVer version\n        // range, with the same semantics as npm package.json ranges.\n        version: '^1.0.2',\n      },\n    },\n  ],\n});\n\nconsole.log(result);\n// Could print something of the form:\n// {\n//   'npm:@metamask/example-snap': {\n//     version: '1.0.0',\n//     permissionName: 'wallet_snap_npm:@metamask/example-snap',\n//     ...\n//   },\n//   'npm:fooSnap': {\n//     error: { message: 'The snap does not exist.' },\n//   },\n// }\n")),(0,i.kt)("h3",{id:"wallet_invokesnap"},(0,i.kt)("inlineCode",{parentName:"h3"},"wallet_invokeSnap")),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"This method is only callable by websites.")),(0,i.kt)("h4",{id:"parameters-2"},"Parameters"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"/**\n * This is a less stringent version of the JSON-RPC 2.0 request object\n * interface. Keep in mind that snaps specify and implement their own JSON-RPC\n * APIs, and may require the `id` and `jsonrpc` fields if they wish.\n */\ninterface SnapRequest {\n  method: string;\n  params?: unknown[] | Record<string, unknown>;\n  id?: string | number;\n  jsonrpc?: '2.0';\n}\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"Array")),(0,i.kt)("ol",{parentName:"li",start:0},(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"string")," - The ID of the snap to invoke."),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"SnapRequest")," - The JSON-RPC request object to send to the invoked snap.")))),(0,i.kt)("h4",{id:"returns-3"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"unknown")," - The result of the snap method call."),(0,i.kt)("h4",{id:"description-3"},"Description"),(0,i.kt)("p",null,"Invokes the specified JSON-RPC method of the specified snap.\nThe snap must be installed and the caller must have the permission to communicate with the snap, or\nthe request is rejected."),(0,i.kt)("p",null,"Snaps are fully responsible for implementing their JSON-RPC API.\nConsult the snap's documentation for available methods, their parameters, and return values."),(0,i.kt)("h4",{id:"example-3"},"Example"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"const result = await ethereum.request({\n  method: 'wallet_invokeSnap',\n  params: [\n    'npm:@metamask/example-snap',\n    {\n      method: 'hello',\n    },\n  ],\n});\n\nconsole.log(result); // We happen to know that this will be `true` or `false`\n")),(0,i.kt)("h2",{id:"restricted-methods"},"Restricted methods"),(0,i.kt)("p",null,"If a method is ",(0,i.kt)("em",{parentName:"p"},"restricted"),", you must ",(0,i.kt)("a",{parentName:"p",href:"/mm-docs-v2/staging/snaps/how-to/request-permissions"},"request permission")," before\nyou can call it.\nBoth snaps and dapps/websites can have permissions.\nSome permissions are only available to snaps, and some are only available to websites."),(0,i.kt)("h3",{id:"wallet_snap_"},(0,i.kt)("inlineCode",{parentName:"h3"},"wallet_snap_*")),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"This method is only callable by websites.")),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},(0,i.kt)("a",{parentName:"p",href:"#wallet_invokesnap"},(0,i.kt)("inlineCode",{parentName:"a"},"wallet_invokeSnap"))," provides a more convenient way of calling this method.")),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"This is a namespaced restricted method.\nThe ",(0,i.kt)("inlineCode",{parentName:"p"},"*")," in the name is always substituted for a string, in this case a snap ID.")),(0,i.kt)("h4",{id:"parameters-3"},"Parameters"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"Array")),(0,i.kt)("ol",{parentName:"li",start:0},(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"SnapRequest")," - The JSON-RPC request object to send to the invoked snap.")))),(0,i.kt)("h4",{id:"returns-4"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"unknown")," - The result of the snap method call."),(0,i.kt)("h4",{id:"description-4"},"Description"),(0,i.kt)("p",null,"Invokes the specified JSON-RPC method of the snap corresponding to the specified permission name.\nThe snap must be installed and the caller must have the permission to communicate with the snap, or\nthe request is rejected."),(0,i.kt)("p",null,"Snaps are fully responsible for implementing their JSON-RPC API.\nConsult the snap's documentation for available methods, their parameters, and return values."),(0,i.kt)("h4",{id:"example-4"},"Example"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"const result = await ethereum.request({\n  method: 'wallet_snap_npm:@metamask/example-snap',\n  params: [\n    {\n      method: 'hello',\n    },\n  ],\n});\n\nconsole.log(result); // We happen to know that this will be `true` or `false`\n")),(0,i.kt)("h3",{id:"snap_confirm"},(0,i.kt)("inlineCode",{parentName:"h3"},"snap_confirm")),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"This method is only callable by snaps.")),(0,i.kt)("h4",{id:"parameters-4"},"Parameters"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"interface SnapConfirmParam {\n  /**\n   * A prompt, phrased as a question, no greater than 40 characters long.\n   */\n  prompt: string;\n\n  /**\n   * A description, displayed with the prompt, no greater than 140 characters\n   * long.\n   */\n  description?: string;\n\n  /**\n   * Free-from text content, no greater than 1800 characters long.\n   * It will be displayed in monospace font in a scrollable text area.\n   */\n  textAreaContent?: string;\n}\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"Array")),(0,i.kt)("ol",{parentName:"li",start:0},(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"SnapConfirmParam")," - An object containing the contents of the confirmation.")))),(0,i.kt)("h4",{id:"returns-5"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"boolean")," - ",(0,i.kt)("inlineCode",{parentName:"p"},"true")," if the user accepted the confirmation, and ",(0,i.kt)("inlineCode",{parentName:"p"},"false")," otherwise."),(0,i.kt)("h4",{id:"description-5"},"Description"),(0,i.kt)("p",null,"Calling this method causes a confirmation to be displayed in the MetaMask UI.\nThe contents of the confirmation depend on the parameters.\nThe user can either approve or reject the confirmation, which is indicated by the method's return value."),(0,i.kt)("p",null,"Use this method to show a MetaMask popup with custom text and buttons to approve or reject an action.\nYou can use this to create requests, confirmations, and opt-in flows for a snap."),(0,i.kt)("h4",{id:"example-5"},"Example"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"const result = await wallet.request({\n  method: 'snap_confirm',\n  params: [\n    {\n      prompt: 'Would you like to take the action?',\n      description: 'The action is...',\n      textAreaContent: 'Very detailed information about the action...',\n    },\n  ],\n});\n\nif (result === true) {\n  // Take the action\n} else {\n  // Do not take the action\n}\n")),(0,i.kt)("h3",{id:"snap_dialog"},(0,i.kt)("inlineCode",{parentName:"h3"},"snap_dialog")),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"This method is only callable by snaps.")),(0,i.kt)("h4",{id:"description-6"},"Description"),(0,i.kt)("p",null,"Calling this method causes a dialog to be displayed in the MetaMask UI.\nThere are three types of dialogs: ",(0,i.kt)("a",{parentName:"p",href:"#alert-dialog"},"alert"),", ",(0,i.kt)("a",{parentName:"p",href:"#confirmation-dialog"},"confirmation"),", and\n",(0,i.kt)("a",{parentName:"p",href:"#prompt-dialog"},"prompt"),".\nEach of these dialog types has different parameters and return types."),(0,i.kt)("h5",{id:"alert-dialog"},"Alert dialog"),(0,i.kt)("p",null,"Displays an alert that can only be acknowledged."),(0,i.kt)("h6",{id:"parameters-5"},"Parameters"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"interface SnapAlertDialogParam {\n  /**\n   * The alert title, no greater than 40 characters long.\n   */\n  title: string;\n\n  /**\n   * A description, displayed with the title, no greater\n   * than 140 characters long.\n   */\n  description?: string;\n\n  /**\n   * Free-from text content, no greater than 1800\n   * characters long.\n   */\n  textAreaContent?: string;\n}\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"Array")),(0,i.kt)("ol",{parentName:"li",start:0},(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"SnapAlertDialogParam")," - An object containing the contents of the alert dialog.")))),(0,i.kt)("h6",{id:"returns-6"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"null")),(0,i.kt)("h6",{id:"example-6"},"Example"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"await wallet.request({\n  method: 'snap_dialog',\n  params: [\n    {\n      type: DialogType.Alert,\n      title: 'Something happened in the system',\n      description: 'The thing that happened is...',\n      textAreaContent: 'Very detailed information about the thing that happened...',\n    },\n  ],\n});\n\n// Code that should execute after the alert has been acknowledged\n")),(0,i.kt)("h5",{id:"confirmation-dialog"},"Confirmation dialog"),(0,i.kt)("p",null,"Displays a confirmation dialog that can be accepted or rejected."),(0,i.kt)("h6",{id:"parameters-6"},"Parameters"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"interface SnapConfirmationDialogParam {\n  /**\n   * The confirmation title, no greater than 40 characters long.\n   */\n  title: string;\n\n  /**\n   * A description, displayed with the title, no greater\n   * than 140 characters long.\n   */\n  description?: string;\n\n  /**\n   * Free-from text content, no greater than 1800\n   * characters long.\n   */\n  textAreaContent?: string;\n}\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"Array")),(0,i.kt)("ol",{parentName:"li",start:0},(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"SnapConfirmationDialogParam")," - An object containing the contents of the confirmation dialog.")))),(0,i.kt)("h6",{id:"returns-7"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"boolean")," - ",(0,i.kt)("inlineCode",{parentName:"p"},"true")," if the confirmation was accepted, ",(0,i.kt)("inlineCode",{parentName:"p"},"false")," otherwise."),(0,i.kt)("h6",{id:"example-7"},"Example"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"const result = await wallet.request({\n  method: 'snap_dialog',\n  params: [\n    {\n      type: DialogType.Confirmation,\n      title: 'Would you like to take the action?',\n      description: 'The action is...',\n      textAreaContent: 'Very detailed information about the action...',\n    },\n  ],\n});\n\nif (result === true) {\n  // Replace the batteries\n} else {\n  // Don't replace the batteries\n}\n")),(0,i.kt)("h5",{id:"prompt-dialog"},"Prompt Dialog"),(0,i.kt)("p",null,"Displays a prompt where the user can enter a text response."),(0,i.kt)("h6",{id:"parameters-7"},"Parameters"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"interface SnapPromptDialogParam {\n  /**\n   * The prompt title, no greater than 40 characters long.\n   */\n  title: string;\n\n  /**\n   * A description, displayed with the title, no greater\n   * than 140 characters long.\n   */\n  description?: string;\n}\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"Array")),(0,i.kt)("ol",{parentName:"li",start:0},(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"SnapPromptDialogParam")," - An object containing the contents of the prompt dialog.")))),(0,i.kt)("h6",{id:"returns-8"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"string")," - The text entered by the user."),(0,i.kt)("h6",{id:"example-8"},"Example"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"const walletAddress = await wallet.request({\n  method: 'snap_dialog',\n  params: [\n    {\n      type: DialogType.Prompt,\n      title: 'What is the wallet address?',\n      description: 'Please enter the wallet address to be monitored...',\n    },\n  ],\n});\n\n// `walletAddress` will be a string containing the address entered by the user\n")),(0,i.kt)("h3",{id:"snap_getbip32entropy"},(0,i.kt)("inlineCode",{parentName:"h3"},"snap_getBip32Entropy")),(0,i.kt)("admonition",{type:"danger"},(0,i.kt)("p",{parentName:"admonition"},"If you call this method, you receive the user's parent key for the derivation path they requested.\nYou're then managing a person's keys, and whatever assets they control, on their behalf.\nTheir safety is your responsibility.")),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"This method is only callable by snaps.")),(0,i.kt)("h4",{id:"parameters-8"},"Parameters"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Object"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"path")," - An array, starting with ",(0,i.kt)("inlineCode",{parentName:"li"},"m"),", containing the BIP-32 derivation path to the key to\nretrieve, for example, ",(0,i.kt)("inlineCode",{parentName:"li"},'["m", "44\'", "60\'"]'),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"curve")," - The curve to use for the key derivation, must be ",(0,i.kt)("inlineCode",{parentName:"li"},"'ed25519'")," or ",(0,i.kt)("inlineCode",{parentName:"li"},"'secp256k1'"),".")))),(0,i.kt)("h4",{id:"returns-9"},"Returns"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"interface SLIP10Node {\n  /**\n   * The 0-indexed path depth of this node.\n   */\n  readonly depth: number;\n\n  /**\n   * The fingerprint of the parent key, or 0 if this is a master node.\n   */\n  readonly parentFingerprint: number;\n\n  /**\n   * The index of the node, or 0 if this is a master node.\n   */\n  readonly index: number;\n\n  /**\n   * The private key of this node.\n   */\n  readonly privateKey: string;\n\n  /**\n   * The public key of this node.\n   */\n  readonly publicKey: string;\n\n  /**\n   * The chain code of this node.\n   */\n  readonly chainCode: string;\n\n  /**\n   * The name of the curve used by the node.\n   */\n  readonly curve: 'ed25519' | 'secp256k1';\n}\n")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"SLIP10Node")," - An object representing the\n",(0,i.kt)("a",{parentName:"p",href:"https://github.com/satoshilabs/slips/blob/master/slip-0010.md"},"SLIP-10")," HD tree node and containing\nits corresponding key material."),(0,i.kt)("h4",{id:"description-7"},"Description"),(0,i.kt)("p",null,"Gets the ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/satoshilabs/slips/blob/master/slip-0010.md"},"SLIP-10")," key for the ",(0,i.kt)("inlineCode",{parentName:"p"},"path"),"\nand ",(0,i.kt)("inlineCode",{parentName:"p"},"curve"),' specified by the method name.\nThis is the "key management" permission of Snaps; use it with the utmost care.'),(0,i.kt)("p",null,"This restricted method is both implemented and designed to be used with\n",(0,i.kt)("a",{parentName:"p",href:"https://npmjs.com/package/@metamask/key-tree"},(0,i.kt)("inlineCode",{parentName:"a"},"@metamask/key-tree")),".\nSee the ",(0,i.kt)("inlineCode",{parentName:"p"},"@metamask/key-tree")," documentation and below example for more information."),(0,i.kt)("p",null,"Note that ",(0,i.kt)("inlineCode",{parentName:"p"},"@metamask/key-tree")," can help you get the\n",(0,i.kt)("a",{parentName:"p",href:"https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki#extended-keys"},"extended private keys"),"\nfor user addresses, but it is your responsibility to know how to use those keys to, for example,\nderive an address for the relevant protocol or sign a transaction for the user."),(0,i.kt)("h4",{id:"example-9"},"Example"),(0,i.kt)(r.Z,{mdxType:"Tabs"},(0,i.kt)(s.Z,{value:"manifest",label:"Manifest",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "initialPermissions": {\n    "snap_getBip32Entropy": [\n      {\n        "path": ["m", "44\'", "3\'"],\n        "curve": "secp256k1" // Or "ed25519"\n      }\n    ]\n  }\n}\n'))),(0,i.kt)(s.Z,{value:"code",label:"Code",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"import { SLIP10Node } from '@metamask/key-tree';\n\n// By way of example, we will use Dogecoin, which has a derivation path starting\n// with `m/44'/3'`.\nconst dogecoinNode = await wallet.request({\n  method: 'snap_getBip32Entropy',\n  params: {\n    // Must be specified exactly in the manifest\n    path: ['m', \"44'\", \"3'\"],\n    curve: 'secp256k1',\n  },\n});\n\n// Next, we'll create an instance of a SLIP-10 node for the Dogecoin node.\nconst dogecoinSlip10Node = await SLIP10Node.fromJson(dogecoinNode);\n\n// m / 44' / 3' / 0'\nconst accountKey0 = await dogecoinSlip10Node.derive([\"bip32:0'\"]);\n\n// m / 44' / 3' / 1'\nconst accountKey1 = await dogecoinSlip10Node.derive([\"bip32:1'\"]);\n\n// Now, you can ask the user to e.g. sign transactions!\n")))),(0,i.kt)("h3",{id:"snap_getbip44entropy"},(0,i.kt)("inlineCode",{parentName:"h3"},"snap_getBip44Entropy")),(0,i.kt)("admonition",{type:"danger"},(0,i.kt)("p",{parentName:"admonition"},"If you call this method, you receive the user's parent key for the protocol they requested.\nYou're then managing a person's keys, and whatever assets they control, on their behalf.\nTheir safety is your responsibility.")),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"This method is only callable by snaps.")),(0,i.kt)("h4",{id:"parameters-9"},"Parameters"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Object"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"coinType")," (",(0,i.kt)("inlineCode",{parentName:"li"},"number"),") - The BIP-44 coin type to get the entropy for.")))),(0,i.kt)("h4",{id:"returns-10"},"Returns"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"interface BIP44CoinTypeNode {\n  /**\n   * The BIP-44 `coin_type` value of this node.\n   */\n  readonly coin_type: number;\n\n  /**\n   * The 0-indexed BIP-44 path depth of this node.\n   *\n   * Since this is a `coin_type` node, it will be the number `2`.\n   */\n  readonly depth: 2;\n\n  /**\n   * The hexadecimal-encoded string representation of the private key for this node.\n   */\n  readonly privateKey: string;\n\n  /**\n   * The hexadecimal-encoded string representation of the public key for this node.\n   */\n  readonly publicKey: string;\n\n  /**\n   * The hexadecimal-encoded string representation of the chain code for this node.\n   */\n  readonly chainCode: string;\n\n  /**\n   * A human-readable representation of the BIP-44 HD tree path of this node.\n   *\n   * Since this is a `coin_type` node, it will be of the form:\n   *\n   * `m / 44' / coin_type'`\n   *\n   * Recall that a complete BIP-44 HD tree path consists of the following nodes:\n   *\n   * `m / 44' / coin_type' / account' / change / address_index`\n   *\n   * With the following depths:\n   *\n   * `0 / 1 / 2 / 3 / 4 / 5`\n   */\n  readonly path: string;\n}\n")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"BIP44CoinTypeNode")," - An object representing the\n",(0,i.kt)("a",{parentName:"p",href:"https://github.com/bitcoin/bips/blob/master/bip-0044.mediawiki"},"BIP-44")," ",(0,i.kt)("inlineCode",{parentName:"p"},"coin_type")," HD tree node\nand containing its corresponding key material."),(0,i.kt)("h4",{id:"description-8"},"Description"),(0,i.kt)("p",null,"Gets the ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/bitcoin/bips/blob/master/bip-0044.mediawiki"},"BIP-44")," ",(0,i.kt)("inlineCode",{parentName:"p"},"coin_type")," key\nfor the ",(0,i.kt)("inlineCode",{parentName:"p"},"coin_type"),' number specified by the method name.\nThis is the "key management" permission of Snaps; use it with the utmost care.\nFor the authoritative list of available protocols and their ',(0,i.kt)("inlineCode",{parentName:"p"},"coin_type")," values, see\n",(0,i.kt)("a",{parentName:"p",href:"https://github.com/satoshilabs/slips/blob/master/slip-0044.md"},"SLIP-44"),"."),(0,i.kt)("p",null,"This restricted method is both implemented and designed to be used with\n",(0,i.kt)("a",{parentName:"p",href:"https://npmjs.com/package/@metamask/key-tree"},(0,i.kt)("inlineCode",{parentName:"a"},"@metamask/key-tree")),".\nSee the ",(0,i.kt)("inlineCode",{parentName:"p"},"@metamask/key-tree")," documentation and below example for more information."),(0,i.kt)("p",null,"Note that ",(0,i.kt)("inlineCode",{parentName:"p"},"@metamask/key-tree")," can help you get the\n",(0,i.kt)("a",{parentName:"p",href:"https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki#extended-keys"},"extended private keys"),"\nfor user addresses, but it is your responsibility to know how to use those keys to, for example,\nderive an address for the relevant protocol or sign a transaction for the user."),(0,i.kt)("h4",{id:"example-10"},"Example"),(0,i.kt)(r.Z,{mdxType:"Tabs"},(0,i.kt)(s.Z,{value:"manifest",label:"Manifest",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "initialPermissions": {\n    "snap_getBip44Entropy": [\n      {\n        "coinType": 3\n      }\n    ]\n  }\n}\n'))),(0,i.kt)(s.Z,{value:"code",label:"Code",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"import { getBIP44AddressKeyDeriver } from '@metamask/key-tree';\n\n// By way of example, we will use Dogecoin, which has `coin_type` 3.\nconst dogecoinNode = await wallet.request({\n  method: 'snap_getBip44Entropy',\n  params: {\n    coinType: 3,\n  },\n});\n\n// Next, we'll create an address key deriver function for the Dogecoin coin_type node.\n// In this case, its path will be: m / 44' / 3' / 0' / 0 / address_index\nconst deriveDogecoinAddress = await getBIP44AddressKeyDeriver(dogecoinNode);\n\n// These are BIP-44 nodes containing the extended private keys for\n// the respective derivation paths.\n\n// m / 44' / 3' / 0' / 0 / 0\nconst addressKey0 = await deriveDogecoinAddress(0);\n\n// m / 44' / 3' / 0' / 0 / 1\nconst addressKey1 = await deriveDogecoinAddress(1);\n\n// Now, you can ask the user to e.g. sign transactions!\n")))),(0,i.kt)("h3",{id:"snap_getbip32publickey"},(0,i.kt)("inlineCode",{parentName:"h3"},"snap_getBip32PublicKey")),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"This method is only callable by snaps.")),(0,i.kt)("h4",{id:"parameters-10"},"Parameters"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Object"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"path")," - An array, starting with ",(0,i.kt)("inlineCode",{parentName:"li"},"m"),", containing the BIP-32 derivation path to the public key to\nretrieve, for example, ",(0,i.kt)("inlineCode",{parentName:"li"},'["m", "44\'", "60\'"]'),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"curve")," - The curve to use for the key derivation, must be ",(0,i.kt)("inlineCode",{parentName:"li"},"'ed25519'")," or ",(0,i.kt)("inlineCode",{parentName:"li"},"'secp256k1'"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"compressed")," - Indicates whether the public key should be compressed.\nThe default is ",(0,i.kt)("inlineCode",{parentName:"li"},"false"),".")))),(0,i.kt)("h4",{id:"returns-11"},"Returns"),(0,i.kt)("p",null,"The public key as hexadecimal ",(0,i.kt)("inlineCode",{parentName:"p"},"string"),"."),(0,i.kt)("h4",{id:"description-9"},"Description"),(0,i.kt)("p",null,"Gets the ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki"},"BIP-32")," public key for the\nderivation path specified by the ",(0,i.kt)("inlineCode",{parentName:"p"},"path")," parameter."),(0,i.kt)("p",null,"Note that this returns the public key, not the extended public key (",(0,i.kt)("inlineCode",{parentName:"p"},"xpub"),"), or Ethereum address."),(0,i.kt)("h4",{id:"example-11"},"Example"),(0,i.kt)(r.Z,{mdxType:"Tabs"},(0,i.kt)(s.Z,{value:"manifest",label:"Manifest",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "initialPermissions": {\n    "snap_getBip32PublicKey": [\n      {\n        "path": ["m", "44\'", "3\'", "0\'", "0", "0"],\n        "curve": "secp256k1" // Or "ed25519"\n      }\n    ]\n  }\n}\n'))),(0,i.kt)(s.Z,{value:"code",label:"Code",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"// By way of example, we will use Dogecoin, which has a derivation path starting\n// with `m/44'/3'`.\nconst dogecoinPublicKey = await wallet.request({\n  method: 'snap_getBip32PublicKey',\n  params: {\n    // The path and curve must be specified in the initial permissions.\n    path: ['m', \"44'\", \"3'\", \"0'\", '0', '0'],\n    curve: 'secp256k1',\n    compressed: false,\n  },\n});\n\n// `0x...`\nconsole.log(dogecoinPublicKey);\n")))),(0,i.kt)("h3",{id:"snap_managestate"},(0,i.kt)("inlineCode",{parentName:"h3"},"snap_manageState")),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"This method is only callable by snaps.")),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"Snaps can currently use this method to store up to 100 MB of data.")),(0,i.kt)("h4",{id:"parameters-11"},"Parameters"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"Array")),(0,i.kt)("ol",{parentName:"li",start:0},(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"'clear' | 'get' | 'update'")," - The state operation to perform."),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"Record<string, unknown> | void")," - The value to update state with if the operation is ",(0,i.kt)("inlineCode",{parentName:"li"},"update"),",\nand nothing otherwise.")))),(0,i.kt)("h4",{id:"returns-12"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"null | Record<string, unknown>")," - The value stored in state of the operation is ",(0,i.kt)("inlineCode",{parentName:"p"},"get"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"null")," otherwise."),(0,i.kt)("h4",{id:"description-10"},"Description"),(0,i.kt)("p",null,"This method allows the snap to persist some data to disk and retrieve it at will.\nThe data is automatically encrypted using a snap-specific key and automatically decrypted when retrieved."),(0,i.kt)("h4",{id:"example-12"},"Example"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"// First, let's persist some data\nawait wallet.request({\n  method: 'snap_manageState',\n  params: ['update', { hello: 'world' }],\n});\n\n// Then, at some later time, let's get the data we stored\nconst persistedData = await wallet.request({\n  method: 'snap_manageState',\n  params: ['get'],\n});\n\nconsole.log(persistedData);\n// { hello: 'world' }\n\n// Finally, if there's no need to store data anymore, we can clear it out\nawait wallet.request({\n  method: 'snap_manageState',\n  params: ['clear'],\n});\n")),(0,i.kt)("h3",{id:"snap_notify"},(0,i.kt)("inlineCode",{parentName:"h3"},"snap_notify")),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"This method is only callable by snaps.")),(0,i.kt)("h4",{id:"parameters-12"},"Parameters"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"interface SnapNotifyParams {\n  /**\n   * Enum determining the notification type.\n   */\n  type: NotificationType;\n\n  /**\n   * A message to show in the notification.\n   */\n  message: string;\n}\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"Array")),(0,i.kt)("ol",{parentName:"li",start:0},(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"SnapNotifyParams")," - An object containing the contents of the notification.")))),(0,i.kt)("h4",{id:"notification-type"},"Notification type"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"enum NotificationType {\n  /**\n   * A notification displayed in the MetaMask UI.\n   */\n  inApp = 'inApp',\n\n  /**\n   * A notification displayed in and by the browser. There is no guarantee that\n   * these will be displayed to the user, and we recommend using `inApp`\n   * notifications unless you have a compelling reason not to.\n   */\n  native = 'native',\n}\n")),(0,i.kt)("h4",{id:"returns-13"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"null")," - This method doesn't return any data."),(0,i.kt)("h4",{id:"description-11"},"Description"),(0,i.kt)("p",null,"Calling this method displays a notification in MetaMask or natively in the browser.\nThe notification type and content are determined by the method's parameters.\nSee above for their meaning and format."),(0,i.kt)("p",null,"This generic notifications interface can be used by any snap with the notifications permission.\nA short notification text can be triggered by a snap for actionable or time sensitive information."),(0,i.kt)("h4",{id:"example-13"},"Example"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"await wallet.request({\n  method: 'snap_notify',\n  params: [\n    {\n      type: 'inApp',\n      message: `Hello, world!`,\n    },\n  ],\n});\n")))}h.isMDXComponent=!0},5162:(e,t,n)=>{n.d(t,{Z:()=>s});var a=n(7294),i=n(6010);const r="tabItem_Ymn6";function s(e){let{children:t,hidden:n,className:s}=e;return a.createElement("div",{role:"tabpanel",className:(0,i.Z)(r,s),hidden:n},t)}},5488:(e,t,n)=>{n.d(t,{Z:()=>h});var a=n(7462),i=n(7294),r=n(6010),s=n(2389),l=n(7392),o=n(7094),p=n(2466);const m="tabList__CuJ",d="tabItem_LNqP";function c(e){const{lazy:t,block:n,defaultValue:s,values:c,groupId:h,className:u}=e,k=i.Children.map(e.children,(e=>{if((0,i.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),g=c??k.map((e=>{let{props:{value:t,label:n,attributes:a}}=e;return{value:t,label:n,attributes:a}})),f=(0,l.l)(g,((e,t)=>e.value===t.value));if(f.length>0)throw new Error(`Docusaurus error: Duplicate values "${f.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const y=null===s?s:s??k.find((e=>e.props.default))?.props.value??k[0].props.value;if(null!==y&&!g.some((e=>e.value===y)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${y}" but none of its children has the corresponding value. Available values are: ${g.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:v,setTabGroupChoices:N}=(0,o.U)(),[b,w]=(0,i.useState)(y),C=[],{blockElementScrollPositionUntilNextRender:x}=(0,p.o5)();if(null!=h){const e=v[h];null!=e&&e!==b&&g.some((t=>t.value===e))&&w(e)}const T=e=>{const t=e.currentTarget,n=C.indexOf(t),a=g[n].value;a!==b&&(x(t),w(a),null!=h&&N(h,String(a)))},_=e=>{let t=null;switch(e.key){case"Enter":T(e);break;case"ArrowRight":{const n=C.indexOf(e.currentTarget)+1;t=C[n]??C[0];break}case"ArrowLeft":{const n=C.indexOf(e.currentTarget)-1;t=C[n]??C[C.length-1];break}}t?.focus()};return i.createElement("div",{className:(0,r.Z)("tabs-container",m)},i.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.Z)("tabs",{"tabs--block":n},u)},g.map((e=>{let{value:t,label:n,attributes:s}=e;return i.createElement("li",(0,a.Z)({role:"tab",tabIndex:b===t?0:-1,"aria-selected":b===t,key:t,ref:e=>C.push(e),onKeyDown:_,onClick:T},s,{className:(0,r.Z)("tabs__item",d,s?.className,{"tabs__item--active":b===t})}),n??t)}))),t?(0,i.cloneElement)(k.filter((e=>e.props.value===b))[0],{className:"margin-top--md"}):i.createElement("div",{className:"margin-top--md"},k.map(((e,t)=>(0,i.cloneElement)(e,{key:t,hidden:e.props.value!==b})))))}function h(e){const t=(0,s.Z)();return i.createElement(c,(0,a.Z)({key:String(t)},e))}}}]);